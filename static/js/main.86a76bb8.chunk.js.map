{"version":3,"sources":["components/Header/Header.tsx","services/ApiFunctions.ts","components/Pokemon/Pokemon.tsx","Pages/Pokedex/Pokedex.tsx","components/CardBody.tsx","Pages/PokemonDetail/PokemonDetail.tsx","routes.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","Fragment","className","src","alt","style","width","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","target","href","role","aria-haspopup","aria-labelledby","getPokesURL","limit","offset","a","fetch","response","json","responseJSON","results","getPokeDataFromURL","pokeURL","getPokeDataFromName","pokeName","Pokemon","props","useState","Object","pokemon","setPokemon","loading","setLoading","React","useEffect","name","apiFunctions","then","resp","to","sprites","front_default","Pokedex","pokemonsURLArray","setPokemonsURLArray","isLoaded","setIsLoaded","pokeApi","pokemonsURL","map","poke","key","CardBody","back_default","stats","stat","base_stat","toUpperCase","TYPE_COLORS","bug","dark","dragon","electric","fairy","fighting","fire","flying","ghost","grass","ground","ice","normal","psychic","poison","rock","steel","water","PokemonDetail","match","pokemonURL","setPokemonURL","url","find","params","getTypeColor","isValidTypeName","Error","height","types","backgroundColor","Routes","exact","path","component","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.86a76bb8.chunk.js","sourcesContent":["import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'jquery/dist/jquery.slim';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport './Header.css';\n\nconst Header = () => {\n  return (\n    <React.Fragment>\n      <header className=\"bg-black\">\n        <nav className=\"navbar navbar-expand-lg navbar-light\">\n          <img\n            className=\"logo\"\n            src=\"https://logodownload.org/wp-content/uploads/2017/08/pokemon-logo.png\"\n            alt=\"\"\n            style={{ width: '200px' }}\n          />\n          <button\n            className=\"navbar-toggler\"\n            type=\"button\"\n            data-toggle=\"collapse\"\n            data-target=\"#navbarSupportedContent\"\n            aria-controls=\"navbarSupportedContent\"\n            aria-expanded=\"false\"\n            aria-label=\"Toggle navigation\"\n          >\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n            <ul className=\"navbar-nav mr-auto\">\n              <li className=\"nav-item active\">\n                <a className=\"nav-link\" target=\"blank\" href=\"https://pokeapi.co/\">\n                  <i className=\"fas fa-database fa-2x\"></i>\n                  <span>PokeApi</span>\n                </a>\n              </li>\n              <li className=\"nav-item active\">\n                <a className=\"nav-link\" target=\"blank\" href=\"https://reactjs.org/\">\n                  <i className=\"fab fa-react fa-2x\"></i>\n                  <span>React</span>\n                </a>\n              </li>\n              <li className=\"nav-item active\">\n                <a className=\"nav-link\" target=\"blank\" href=\"https://getbootstrap.com/\">\n                  <i className=\"fab fa-bootstrap fa-2x\"></i>\n                  <span>Bootstrap</span>\n                </a>\n              </li>\n              <li className=\"nav-item dropdown\">\n                <span\n                  className=\"nav-link dropdown-toggle active float-right\"\n                  id=\"navbarDropdown\"\n                  role=\"button\"\n                  data-toggle=\"dropdown\"\n                  aria-haspopup=\"true\"\n                  aria-expanded=\"false\"\n                >\n                  <span>danielPantalena</span>\n                </span>\n                <div className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\n                  <a\n                    className=\"dropdown-item\"\n                    target=\"blank\"\n                    href=\"https://danielpantalena.github.io\"\n                  >\n                    Page\n                  </a>\n                  <a\n                    className=\"dropdown-item\"\n                    target=\"blank\"\n                    href=\"https://www.linkedin.com/in/danielpantalena/\"\n                  >\n                    LinkedIn\n                  </a>\n                  <div className=\"dropdown-divider\"></div>\n                  <a\n                    className=\"dropdown-item\"\n                    target=\"blank\"\n                    href=\"https://github.com/danielPantalena\"\n                  >\n                    GitHub\n                  </a>\n                </div>\n              </li>\n            </ul>\n          </div>\n        </nav>\n      </header>\n    </React.Fragment>\n  );\n};\n\nexport default Header;\n","export const getPokesURL = async (limit: number, offset: number) => {\n  const response = await fetch(`https://pokeapi.co/api/v2/pokemon?limit=${limit}&offset=${offset}`);\n  const responseJSON = await response.json();\n  return responseJSON.results;\n};\n\nexport const getPokeDataFromURL = async (pokeURL: string) => {\n  const response = await fetch(pokeURL);\n  const responseJSON = await response.json();\n  return responseJSON;\n};\n\nexport const getPokeDataFromName = async (pokeName: string) => {\n  const response = await fetch(`https://pokeapi.co/api/v2/pokemon/${pokeName}`);\n  const responseJSON = await response.json();\n  return responseJSON;\n};\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport * as apiFunctions from '../../services/ApiFunctions';\nimport './Pokemon.css';\nimport { PokemonObj, PokemonProps } from '../../PokemonInterfaces';\n\nconst Pokemon = (props: PokemonProps) => {\n  const [pokemon, setPokemon] = useState<PokemonObj>(Object);\n  const [loading, setLoading] = useState(true);\n\n  React.useEffect(() => {\n    const { name } = props;\n    apiFunctions.getPokeDataFromName(name).then((resp: PokemonObj) => {\n      setPokemon(resp);\n      setLoading(false);\n    });\n  }, [props]);\n\n  if (loading) return <></>;\n\n  return (\n    <React.Fragment>\n      <Link to={`/${pokemon.name}`} className=\"pokemon\">\n        <p className=\"pokemon-id\">{`#${pokemon.id}`}</p>\n        <img src={pokemon.sprites.front_default} alt=\"pokemon\" />\n        <h3 className=\"pokemon-name\">{pokemon.name}</h3>\n      </Link>\n    </React.Fragment>\n  );\n};\n\nexport default Pokemon;\n","import React from 'react';\n\nimport * as pokeApi from '../../services/ApiFunctions';\nimport Pokemon from '../../components/Pokemon/Pokemon';\n\nimport { PokemonAPI } from '../../PokemonInterfaces';\nimport './Pokedex.css';\n\nconst Pokedex = () => {\n  const [pokemonsURLArray, setPokemonsURLArray] = React.useState<PokemonAPI[]>([]);\n  const [isLoaded, setIsLoaded] = React.useState<boolean>(false);\n\n  React.useEffect(() => {\n    pokeApi.getPokesURL(151, 0).then((pokemonsURL) => {\n      setPokemonsURLArray(pokemonsURL);\n      setIsLoaded(true);\n    });\n  }, []);\n\n  if (isLoaded) {\n    return (\n      <React.Fragment>\n        <div className=\"pokedex\">\n          {pokemonsURLArray.map((poke: PokemonAPI) => (\n            <Pokemon key={poke.name} name={poke.name} />\n          ))}\n        </div>\n      </React.Fragment>\n    );\n  }\n  return <div>Carregando...</div>;\n};\n\nexport default Pokedex;\n","import React from 'react';\nimport { PokemonObj } from '../PokemonInterfaces';\n\ninterface CardBodyProps {\n  pokemon: PokemonObj;\n}\n\nconst CardBody = ({ pokemon }: CardBodyProps) => {\n  return (\n    <div className=\"card-body\">\n      <div className=\"row align-items-center\">\n        <div className=\"col-md-3\">\n          <img src={pokemon.sprites.front_default} alt=\"a poke\" />\n          <img src={pokemon.sprites.back_default} alt=\"a poke\" />\n        </div>\n        <div className=\"col-md-9\">\n          <h4 className=\"mx-auto pokemon-name\">{pokemon.name}</h4>\n\n          {pokemon.stats.map(({ stat, base_stat }) => {\n            return (\n              <div key={stat.name} className=\"row align-items-center\">\n                <div className=\"col-12 col-md-3\">{stat.name.toUpperCase()}</div>\n                <div className=\"col-12 col-md-9\">\n                  <div className=\"progress\">\n                    <div\n                      className=\"progress-bar\"\n                      style={{\n                        width: `${base_stat}%`,\n                      }}\n                    >\n                      <span className=\"base-stat\">{base_stat}</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CardBody;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport * as pokeApi from '../../services/ApiFunctions';\nimport CardBody from '../../components/CardBody';\n\nimport { RouteProps, PokemonObj, PokemonAPI, Types } from '../../PokemonInterfaces';\nimport './PokemonDetail.css';\n\nconst TYPE_COLORS = {\n  bug: 'b1c12e',\n  dark: '4f3a2d',\n  dragon: '755edf',\n  electric: 'fcbc17',\n  fairy: 'f4b1f4',\n  fighting: '823851d',\n  fire: 'e73b0c',\n  flying: 'a3b3f7',\n  ghost: '6060b2',\n  grass: '74c236',\n  ground: 'd3b257',\n  ice: 'a3e7fd',\n  normal: 'c8c4bc',\n  psychic: 'FF1493',\n  poison: '934594',\n  rock: 'b9a156',\n  steel: 'b5b5c3',\n  water: '3295f6',\n};\n\nconst PokemonDetail = ({ match }: RouteProps) => {\n  const [loading, setLoading] = React.useState(true);\n  const [pokemon, setPokemon] = React.useState<PokemonObj>(Object);\n  const [pokemonURL, setPokemonURL] = React.useState<string>('URLnotFound');\n\n  React.useEffect(() => {\n    pokeApi.getPokesURL(151, 0).then((pokemonsURL: PokemonAPI[]) => {\n      const url =\n        // find POSSIBLY RETURNS 'undefined'. So is necessary to use te 'OPTINIAL CHAINING'(?.) of TS.\n        //   when did't find, it will return 'undefined'.\n\n        // 'NULLISH COALESCING'(??) of TS, goes hand-in-hand with Optinial Chaining. When 'undefined' you can\n        //   returns another default value.\n\n        // Good example of OPITINAL CHAINING  and NULLISH COALESCING below :)\n        pokemonsURL.find(({ name }) => name === match.params.name)?.url ?? 'URLnotFound';\n      setPokemonURL(url);\n    });\n  }, [match]);\n\n  React.useEffect(() => {\n    if (pokemonURL === 'URLnotFound') return;\n    pokeApi.getPokeDataFromURL(pokemonURL).then((response: PokemonObj) => {\n      setPokemon(response);\n      setLoading(false);\n    });\n  }, [pokemonURL]);\n\n  // You must validate the input to get values from TYPE_COLOR object with a unknow type.\n  const isValidTypeName = (type: string): type is keyof typeof TYPE_COLORS => {\n    return type in TYPE_COLORS;\n  };\n\n  const getTypeColor = (type: string) => {\n    if (!isValidTypeName(type)) throw Error(`${type} was NOT found as keyof TYPE_COLORS`);\n    return `#${TYPE_COLORS[type]}`; // I could use \"TYPE_COLORS[type]\" because of the validation.\n  };\n\n  if (loading) return <div>Carregando...</div>;\n\n  return (\n    <React.Fragment>\n      <div className=\"content\" style={{ height: '100vh' }}>\n        <Link to=\"/\" className=\"text-white back-link\">\n          <div className=\"link-to-back\">\n            <i className=\"fas fa-arrow-left\"></i>\n            <span className=\"link-to-back-text\">Voltar</span>\n          </div>\n        </Link>\n        <div className=\"col mt-3 pt-3\">\n          <div className=\"card\">\n            <div className=\"card-header\">\n              <div className=\"row\">\n                <div className=\"col-5\">\n                  <h3 className=\"pokemon-name\">\n                    #{`${pokemon.id}`} {pokemon.name}\n                  </h3>\n                </div>\n                <div className=\"col-7\">\n                  <div className=\"float-right\">\n                    {pokemon.types.map(({ type }: Types) => {\n                      return (\n                        <span\n                          key={type.name}\n                          className=\"badge badge-primary badge-pill mr-1 type-name\"\n                          style={{ backgroundColor: `${getTypeColor(type.name)}` }}\n                        >\n                          {type.name}\n                        </span>\n                      );\n                    })}\n                  </div>\n                </div>\n              </div>\n            </div>\n            <CardBody pokemon={pokemon} />\n          </div>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default PokemonDetail;\n","import React from 'react';\nimport { HashRouter, Switch, Route } from 'react-router-dom';\nimport Pokedex from './Pages/Pokedex/Pokedex';\nimport PokemonDetail from './Pages/PokemonDetail/PokemonDetail';\n\nconst Routes = () => {\n  return (\n    <HashRouter>\n      <Switch>\n        <Route exact path=\"/\" component={Pokedex} />\n        <Route path=\"/:name\" component={PokemonDetail} />\n      </Switch>\n    </HashRouter>\n  );\n};\n\nexport default Routes;\n","import React from 'react';\nimport './App.css';\n\nimport Header from './components/Header/Header';\nimport Routes from './routes'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header/>\n      <Routes />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}